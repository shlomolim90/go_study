package simple_module


import (
    "fmt"
    "time"
)


func WaitAfter(t time.Duration) <- chan struct{} {
    // NOTICE: make returns non-zero value.
    // NOTICE: make is usually used by channel, slices, maps
    ch := make(chan struct{})

    go func() {
        // Send signal when go routine closed.
        defer close(ch)

        fmt.Printf("Start Sleep %d\n")
        time.Sleep(t)
        fmt.Printf("Finish Sleep \n")
    }()
    return ch
}


func TestWaiter() {
    // This function waits multiple events generated by
    // funcions returning a channel.

    select {
    case <-WaitAfter(3 * time.Second):
    }
}
